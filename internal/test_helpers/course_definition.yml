slug: "sqlite"
name: "Build your own SQLite"
short_name: "SQLite"
release_status: "live"

description_md: |
  In this challenge, you'll build a barebones SQLite implementation that supports
  basic SQL queries like SELECT. Along the way you'll learn about SQLite's
  [file format](https://sqlite.org/fileformat.html), how indexed data is
  stored in B-trees and more.

short_description_md: |
  Learn about parsing SQL syntax, SQLite's file format, how indexed data is stored in B-trees and more

completion_percentage: 5

languages:
  - slug: "csharp"
    starter_repository_url: "https://github.com/codecrafters-io/sqlite-starter-csharp"

  - slug: "go"
    starter_repository_url: "https://github.com/codecrafters-io/sqlite-starter-go"

  - slug: "javascript"
    starter_repository_url: "https://github.com/codecrafters-io/sqlite-starter-javascript"

  - slug: "python"
    starter_repository_url: "https://github.com/codecrafters-io/sqlite-starter-python"

  - slug: "rust"
    starter_repository_url: "https://github.com/codecrafters-io/sqlite-starter-rust"

marketing:
  description: Learn about SQLite's file format, how indexed data is stored in B-trees and more.
  difficulty: hard
  introduction_md: |
    In this challenge, you'll build a barebones SQLite implementation that supports
    basic SQL queries like SELECT. Along the way you'll learn about SQLite's
    [file format](https://sqlite.org/fileformat.html), how indexed data is
    stored in B-trees and more.
  sample_extension_idea_title: "Transactions"
  sample_extension_idea_description: "A SQLite implementation that can handle atomic transactions using a write-ahead log (WAL) file"
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Team, Apple"
      author_avatar: "https://codecrafters.io/images/testimonials/ananthalakshmi_sankar.jpeg"
      link: "https://github.com/anu294"
      text: |
        There are few sites I like as much that have a step by step guide. The real-time feedback is so good, it's creepy!
    - author_name: "Pranjal Paliwal"
      author_description: "Software Engineer, Headout"
      author_avatar: "https://codecrafters.io/images/testimonials/pranjal_paliwal.jpeg"
      link: "https://github.com/betterclever"
      text: |
        Enjoying programming all over again. It's been a while since I wrote Rust, but getting a good hang of it.

stages:
  - slug: "init"
    name: "Print number of tables"
    difficulty: very_easy
    description_md: |
      In this stage, you'll implement one of SQLite's
      [dot-commands](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_): `.dbinfo`. This
      command prints metadata about a SQLite database file.

      The command is executed like this:

      ```
      $ sqlite3 sample.db .dbinfo
      ```

      It prints output in this format:

      ```
      database page size:  4096
      write format:        1
      read format:         1

      ...

      number of tables:    5
      schema size:         330
      data version:        1
      ```

      We're only going to focus on one of these values: `number of tables`. To find the number of tables, you'll need
      to count the number of rows in the
      [`sqlite_schema`](https://www.sqlite.org/fileformat.html#storage_of_the_sql_database_schema) table.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db .dbinfo
      ```

      and here's the output it expects:

      ```
      number of tables: 2
      ```
    marketing_md: |
      In this stage, you'll implement one of SQLite's
      [dot-commands](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_): `.dbinfo`. This command
      prints metadata related a SQLite database, and you'll implement one of these values: the number of
      tables. You'll do this by parsing a file that uses the
      [SQLite database file format](https://www.sqlite.org/fileformat.html).

  - slug: "table_names"
    name: "Print table names"
    difficulty: easy
    description_md: |
      In this stage, you'll implement another dot-command:
      [`.tables`](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_).

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db .tables
      ```

      and here's the output it expects:

      ```
      apples   oranges
      ```

      Notice how the table names are formatted with more than one space between each other? That's because `sqlite3`
      formats its output so that every value has a fixed-width. Your program doesn't need to mimic this behaviour. Using
      just one space as a separator should work. Both `apples oranges` and <code>apples &nbsp; oranges</code> will pass
      our tests.
    marketing_md: |
      In this stage, you'll implement another dot-command:
      [`.tables`](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_). Instead of just printing
      the count of tables like in the previous stage, you'll print out the names of tables too.

  - slug: "row_counts"
    name: "Count rows in a table"
    difficulty: medium
    description_md: |
      Now that you've gotten your feet wet with the [SQLite database file format](https://www.sqlite.org/fileformat.html),
      it's time to move on to actual SQL!

      In this stage, your program will need to read the count of rows from a table.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db "SELECT COUNT(*) FROM apples"
      ```

      and here's the output it expects:

      ```
      4
      ```

      You'll need to read the table's row from the [`sqlite_schema`](https://www.sqlite.org/schematab.html) table and
      follow the `rootpage` value to visit the page corresponding to the table. For now you can assume that the contents
      of the table are small enough to fit inside the root page. We'll deal with tables that span multiple pages in
      stage 7.

      Remember: You don't need to implement a full-blown SQL parser just yet. We'll get to that in the
      next stages. For now you can just split the input by " " and pick the last item to get the table name.
    marketing_md: |
      Now that you've gotten your feet wet with the [SQLite database file format](https://www.sqlite.org/fileformat.html),
      it's time to move on to actual SQL!
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form:
      `SELECT COUNT(*) FROM <table>`.

  - slug: "read_single_column"
    name: "Read data from a single column"
    difficulty: hard
    description_md: |
      Now that you're comfortable with jumping across database pages, let's dig a little deeper and read data from
      rows in a table.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db "SELECT name FROM apples"
      ```

      and here's the output it expects:

      ```
      Granny Smith
      Fuji
      Honeycrisp
      Golden Delicious
      ```

      The order of rows returned doesn't matter.

      Rows are stored on disk in the [Record Format](https://www.sqlite.org/fileformat.html#record_format), which is
      just an ordered sequence of values. To extract data for a single column, you'll need to know the order of that
      column in the sequence. You'll need to parse the table's `CREATE TABLE` statement to do this. The `CREATE TABLE`
      statement is stored in the [`sqlite_schema`](https://www.sqlite.org/schematab.html) table's `sql` column.

      {{#lang_is_python}}
      Not interested in implementing a SQL parser from scratch? [`sqlparse`](https://pypi.org/project/sqlparse/)
      is available as a dependency if you'd like to use it.
      {{/lang_is_python}}
      {{#lang_is_go}}
      Not interested in implementing a SQL parser from scratch? [`pingcap/parser`](https://github.com/pingcap/parser)
      is available as a dependency if you'd like to use it.
      {{/lang_is_go}}
      {{#lang_is_rust}}
      Not interested in implementing a SQL parser from scratch? The [`nom`](https://crates.io/crates/nom),
      [`peg`](https://crates.io/crates/peg) and [`regex`](https://crates.io/crates/regex) crates are available in
      `Cargo.toml` if you'd like to use them.
      {{/lang_is_rust}}
    marketing_md: |
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form:
      `SELECT <column> FROM <table>`.

  - slug: "read_multiple_columns"
    name: "Read data from multiple columns"
    difficulty: hard
    description_md: |
      This stage is similar to the previous one, just that the tester will query for multiple columns instead of just
      one.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db "SELECT name, color FROM apples"
      ```

      and here's the output it expects:

      ```
      Granny Smith|Light Green
      Fuji|Red
      Honeycrisp|Blush Red
      Golden Delicious|Yellow
      ```

      Just like in the previous stage, the order of rows doesn't matter.
    marketing_md: |
      This stage is similar to the previous one, just that you'll read data from multiple columns instead of just one.
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form: `SELECT <column1>,<column2> FROM <table>`.

  - slug: "where"
    name: "Filter data with a WHERE clause"
    difficulty: hard
    description_md: |
      In this stage, you'll support filtering records using a `WHERE` clause.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh sample.db "SELECT name, color FROM apples WHERE color = 'Yellow'"
      ```

      and here's the output it expects:

      ```
      Golden Delicious|Yellow
      ```

      For now you can assume that the contents of the table are small enough to fit inside the root page. We'll deal
      with tables that span multiple pages in the next stage.
    marketing_md: |
      In this stage, you'll filter records based on a `WHERE` clause. You'll assume that the query can't be served by
      an index, so you'll visit all records in a table and then filter out the matching ones.

  - slug: "table_scan"
    name: "Retrieve data using a full-table scan"
    difficulty: hard
    description_md: |
      Time to play with larger amounts of data!

      In this stage you'll deal with the same syntax as before: a query with a `WHERE` clause. However, this time, the
      table you'll be querying will be larger and it'll span multiple pages.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh superheroes.db "SELECT id, name FROM superheroes WHERE eye_color = 'Pink Eyes'"
      ```

      and here's the output it expects:

      ```
      297|Stealth (New Earth)
      790|Tobias Whale (New Earth)
      1085|Felicity (New Earth)
      2729|Thrust (New Earth)
      3289|Angora Lapin (New Earth)
      3913|Matris Ater Clementia (New Earth)
      ```

      The tester is going to use a sample database of superheroes that is ~1MB in size. You can download a small
      version of this to test locally, read the **Sample Databases** section in [the README]({{readme_url}}).

      You'll need to traverse a [B-tree](https://en.wikipedia.org/wiki/B-tree) in this stage. If you're unfamiliar with
      how B-trees work or just need a refresher, Vaidehi Joshi's
      [Busying Oneself With B-Trees](https://medium.com/basecs/busying-oneself-with-b-trees-78bbf10522e7) is a good place to
      start. For specifics on how SQLite stores B-trees on disk, read the
      [B-tree Pages](https://www.sqlite.org/fileformat.html#b_tree_pages) documentation section.
    marketing_md: |
      In this stage, you'll filter records based on a `WHERE` clause. You'll assume that the query can't be served by
      an index, so you'll visit all records in a table and then filter out the matching ones.

  - slug: "index_scan"
    name: "Retrieve data using an index"
    difficulty: hard
    description_md: |
      In this stage, we'll implement an index scan. Rather than reading _all_ rows in a table and then filtering
      in-memory, we'll use an index to perform a more intelligent search.

      To test whether your implementation actually uses an index, the tester will use a database is ~1GB in size and
      expect your program to return query results in less than 3 seconds.

      The test database contains a `companies` table with an index named `idx_companies_country` on the
      `country` column.

      You can download a small version of this database to test locally, read the **Sample Databases** section in
      [the README]({{readme_url}}) for details.

      Here's how the tester will execute your program:

      ```
      $ ./your_sqlite3.sh companies.db "SELECT id, name FROM companies WHERE country = 'eritrea'"
      ```

      and here's the output it expects:

      ```
      121311|unilink s.c.
      2102438|orange asmara it solutions
      5729848|zara mining share company
      6634629|asmara rental
      ```

      You can assume that all queries run by the tester will include `country` in the `WHERE` clause,
      so they can be served by the index. The tester will run multiple randomized queries and expect all of them
      to return results in under 3 seconds.
    marketing_md: |
      This stage is similar to the previous one, but focuses on enhancing query performance using an index. In this
      stage, your program will need to read through millions of rows in under 5 seconds.
