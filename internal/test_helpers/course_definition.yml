slug: "sqlite"
name: "Build your own SQLite"
description_md: |
  In this challenge, you'll build a barebones SQLite implementation that supports
  basic SQL statements like SELECT/INSERT.

  Along the way, you'll learn about SQLite's [file format](https://sqlite.org/fileformat.html), how indexed data is
  [stored in B-trees](https://jvns.ca/blog/2014/10/02/how-does-sqlite-work-part-2-btrees/) and more.
completion_percentage: 5

supported_languages: ["python"]
early_access_languages: []
starter_repos:
  python: https://github.com/codecrafters-io/sqlite-starter-python

marketing:
  description: Learn about SQLite's file format, how indexed data is stored in B-trees and more.
  difficulty: hard
  introduction_md: |
    In this challenge, you'll build a barebones SQLite implementation that supports
    basic SQL statements like SELECT/INSERT. Along the way, you'll learn about SQLite's
    [file format](https://sqlite.org/fileformat.html), how indexed data is
    stored in B-trees and more.

stages:
  - slug: "init"
    name: "Print number of tables"
    description_md: |
      TBD
    marketing_md: |
      In this stage, you'll implement one of SQLite's dot-commands: [`.dbinfo`](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_).
      This command prints metadata related a SQLite database, and you'll implement one of these values: the number of
      tables. You'll do this by parsing a file that uses the [SQLite database file format](https://www.sqlite.org/fileformat.html).

  - slug: "table_names"
    name: "Print table names"
    description_md: |
      TBD
    marketing_md: |
      In this stage, you'll implement another dot-command:
      [`.tables`](https://www.sqlite.org/cli.html#special_commands_to_sqlite3_dot_commands_). Instead of just printing
      the count of tables like in the previous stage, you'll print out the names of tables too.

  - slug: "row_counts"
    name: "Count rows in a table"
    description_md: |
      TBD
    marketing_md: |
      Now that you've gotten your feet wet with the [SQLite database file format](https://www.sqlite.org/fileformat.html),
      it's time to move on to actual SQL!

      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form:
      `SELECT COUNT(*) FROM <table>`.

  - slug: "read_single_column"
    name: "Read data from a single column"
    description_md: |
      TBD
    marketing_md: |
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form: `SELECT <column> FROM <table>`.

  - slug: "read_multiple_columns"
    name: "Read data from multiple columns"
    description_md: |
      TBD
    marketing_md: |
      This stage is similar to the previous one, just that you'll read data from multiple columns instead of just one.
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form: `SELECT <column1>,<column2> FROM <table>`.

  - slug: "filter_rows"
    name: "Filter data using a WHERE clause"
    description_md: |
      TBD
    marketing_md: |
      This stage is similar to the previous one, just that you'll read data from multiple columns instead of just one.
      In this stage, your sqlite3 implementation will need to execute a SQL statement of this form: `SELECT <column1>,<column2> FROM <table>`.
